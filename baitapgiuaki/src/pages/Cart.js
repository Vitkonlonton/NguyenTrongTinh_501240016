import React, { useState, useEffect } from 'react';
import './Cart.css';

const Cart = ({ cartItems, updateCartItem, removeFromCart, clearCart, onPageChange }) => {
  const [showCheckout, setShowCheckout] = useState(false);
  const [couponCode, setCouponCode] = useState('');
  const [discount, setDiscount] = useState(0);
  const [orderInfo, setOrderInfo] = useState({
    fullName: '',
    phone: '',
    email: '',
    address: '',
    paymentMethod: 'cash'
  });

  // Debug: ki·ªÉm tra d·ªØ li·ªáu cart items
  useEffect(() => {
    console.log('Cart Items Data:', cartItems);
    cartItems.forEach((item, index) => {
      console.log(`Item ${index + 1}:`, {
        name: item.name,
        hasImage: !!item.image,
        image: item.image,
        price: item.price,
        quantity: item.quantity
      });
    });
  }, [cartItems]);

  // H√ÄM QUAY L·∫†I TRANG S·∫¢N PH·∫®M
  const goBackToProducts = () => {
    window.location.hash = 'products';
    window.dispatchEvent(new HashChangeEvent('hashchange'));
  };

  const calculateSubtotal = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const calculateTotal = () => {
    const subtotal = calculateSubtotal();
    const shipping = subtotal >= 1000000 ? 0 : 30000;
    return subtotal - discount + shipping;
  };

  const calculateTotalItems = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };

  const handleQuantityChange = (productId, newQuantity) => {
    if (newQuantity < 1) {
      removeFromCart(productId);
    } else if (newQuantity <= 100) {
      updateCartItem(productId, newQuantity);
    }
  };

  const applyCoupon = () => {
    const coupons = {
      'PERFUME10': 0.1,
      'WELCOME20': 0.2,
      'LUXURY15': 0.15
    };
    
    if (coupons[couponCode.toUpperCase()]) {
      const discountRate = coupons[couponCode.toUpperCase()];
      const discountAmount = calculateSubtotal() * discountRate;
      setDiscount(discountAmount);
      alert(`√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng! Gi·∫£m ${discountRate * 100}%`);
    } else {
      alert('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!');
    }
  };

  const handleCheckout = (e) => {
    e.preventDefault();
    const orderData = {
      ...orderInfo,
      items: cartItems.map(item => ({
        id: item.id,
        name: item.name,
        price: item.price,
        image: item.image,
        quantity: item.quantity
      })),
      total: calculateTotal(),
      discount: discount,
      orderDate: new Date().toISOString()
    };
    
    const existingOrders = JSON.parse(localStorage.getItem('perfumeShopOrders') || '[]');
    const newOrder = {
      ...orderData, 
      id: Date.now(), 
      status: 'ƒêang x·ª≠ l√Ω',
      orderNumber: 'DH' + Date.now()
    };
    
    existingOrders.push(newOrder);
    localStorage.setItem('perfumeShopOrders', JSON.stringify(existingOrders));
    
    alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! Chuy·ªÉn ƒë·∫øn trang ƒë∆°n h√†ng...');
    clearCart();
    setShowCheckout(false);
    setDiscount(0);
    setCouponCode('');
    
    // T·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn trang ƒë∆°n h√†ng
    setTimeout(() => {
      if (onPageChange) {
        onPageChange('orders');
      } else {
        window.location.hash = 'orders';
        window.dispatchEvent(new HashChangeEvent('hashchange'));
      }
    }, 1500);
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const getDeliveryDate = () => {
    const today = new Date();
    const deliveryDate = new Date(today);
    deliveryDate.setDate(today.getDate() + 3);
    return deliveryDate.toLocaleDateString('vi-VN');
  };

  // H√†m x·ª≠ l√Ω l·ªói ·∫£nh
  const handleImageError = (e) => {
    e.target.src = 'https://via.placeholder.com/300x300?text=·∫¢nh+s·∫£n+ph·∫©m';
    e.target.alt = '·∫¢nh s·∫£n ph·∫©m kh√¥ng kh·∫£ d·ª•ng';
  };

  if (showCheckout) {
    const subtotal = calculateSubtotal();
    const shipping = subtotal >= 1000000 ? 0 : 30000;
    
    return (
      <div className="cart-page">
        <div className="container">
          <div className="checkout-section-luxury">
            <div className="checkout-header">
              <h2>üõçÔ∏è Thanh To√°n</h2>
              <p>Ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n</p>
            </div>
            
            <form onSubmit={handleCheckout} className="checkout-form-luxury">
              <div className="form-grid">
                <div className="form-group-luxury">
                  <label>H·ªç v√† T√™n *</label>
                  <input
                    type="text"
                    required
                    value={orderInfo.fullName}
                    onChange={(e) => setOrderInfo({...orderInfo, fullName: e.target.value})}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  />
                </div>
                
                <div className="form-group-luxury">
                  <label>S·ªë ƒêi·ªán Tho·∫°i *</label>
                  <input
                    type="tel"
                    required
                    value={orderInfo.phone}
                    onChange={(e) => setOrderInfo({...orderInfo, phone: e.target.value})}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  />
                </div>
                
                <div className="form-group-luxury">
                  <label>Email *</label>
                  <input
                    type="email"
                    required
                    value={orderInfo.email}
                    onChange={(e) => setOrderInfo({...orderInfo, email: e.target.value})}
                    placeholder="Nh·∫≠p email"
                  />
                </div>
                
                <div className="form-group-luxury full-width">
                  <label>ƒê·ªãa Ch·ªâ Giao H√†ng *</label>
                  <textarea
                    required
                    value={orderInfo.address}
                    onChange={(e) => setOrderInfo({...orderInfo, address: e.target.value})}
                    rows="3"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng chi ti·∫øt"
                  />
                </div>
              </div>
              
              <div className="delivery-info-luxury">
                <h4>üöö Th√¥ng Tin Giao H√†ng</h4>
                <div className="delivery-details">
                  <div className="delivery-item">
                    <span className="delivery-icon">üìÖ</span>
                    <div>
                      <strong>Ng√†y nh·∫≠n h√†ng d·ª± ki·∫øn</strong>
                      <p>{getDeliveryDate()}</p>
                    </div>
                  </div>
                  <div className="delivery-item">
                    <span className="delivery-icon">‚è∞</span>
                    <div>
                      <strong>Th·ªùi gian giao h√†ng</strong>
                      <p>08:00 - 22:00 h√†ng ng√†y</p>
                    </div>
                  </div>
                  <div className="delivery-item">
                    <span className="delivery-icon">üöö</span>
                    <div>
                      <strong>Ph√≠ v·∫≠n chuy·ªÉn</strong>
                      <p>{shipping === 0 ? 'Mi·ªÖn ph√≠' : formatPrice(shipping)}</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="payment-method-luxury">
                <h4>üí≥ Ph∆∞∆°ng Th·ª©c Thanh To√°n</h4>
                <div className="payment-options-luxury">
                  <label className="payment-option">
                    <input
                      type="radio"
                      value="cash"
                      checked={orderInfo.paymentMethod === 'cash'}
                      onChange={(e) => setOrderInfo({...orderInfo, paymentMethod: e.target.value})}
                    />
                    <div className="payment-content">
                      <span className="payment-icon">üíµ</span>
                      <div>
                        <strong>Ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng</strong>
                        <p>Thanh to√°n khi nh·∫≠n ƒë∆∞·ª£c h√†ng</p>
                      </div>
                    </div>
                  </label>
                  <label className="payment-option">
                    <input
                      type="radio"
                      value="transfer"
                      checked={orderInfo.paymentMethod === 'transfer'}
                      onChange={(e) => setOrderInfo({...orderInfo, paymentMethod: e.target.value})}
                    />
                    <div className="payment-content">
                      <span className="payment-icon">üè¶</span>
                      <div>
                        <strong>Chuy·ªÉn kho·∫£n ng√¢n h√†ng</strong>
                        <p>Chuy·ªÉn kho·∫£n tr∆∞·ªõc khi giao h√†ng</p>
                      </div>
                    </div>
                  </label>
                </div>
              </div>
              
              <div className="order-summary-checkout-luxury">
                <h4>üì¶ T√≥m T·∫Øt ƒê∆°n H√†ng</h4>
                <div className="order-items-preview">
                  {cartItems.map(item => (
                    <div key={item.id} className="order-preview-item">
                      <div className="preview-item-image">
                        <img 
                          src={item.image} 
                          alt={item.name}
                          onError={handleImageError}
                        />
                      </div>
                      <div className="preview-item-details">
                        <span className="preview-item-name">{item.name}</span>
                        <span className="preview-item-quantity">S·ªë l∆∞·ª£ng: {item.quantity}</span>
                      </div>
                      <span className="preview-item-total">
                        {formatPrice(item.price * item.quantity)}
                      </span>
                    </div>
                  ))}
                </div>
                <div className="summary-totals">
                  <div className="summary-row">
                    <span>T·∫°m t√≠nh:</span>
                    <span>{formatPrice(subtotal)}</span>
                  </div>
                  {discount > 0 && (
                    <div className="summary-row discount">
                      <span>Gi·∫£m gi√°:</span>
                      <span>-{formatPrice(discount)}</span>
                    </div>
                  )}
                  <div className="summary-row shipping">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                    <span>{shipping === 0 ? 'Mi·ªÖn ph√≠' : formatPrice(shipping)}</span>
                  </div>
                  <div className="summary-row total">
                    <span>T·ªïng thanh to√°n:</span>
                    <span>{formatPrice(calculateTotal())}</span>
                  </div>
                </div>
              </div>
              
              <div className="checkout-buttons-luxury">
                <button 
                  type="button" 
                  className="back-btn-luxury"
                  onClick={() => setShowCheckout(false)}
                >
                  ‚Üê Quay l·∫°i gi·ªè h√†ng
                </button>
                <button type="submit" className="complete-order-btn-luxury">
                  ‚úÖ Ho√†n Th√†nh ƒê·∫∑t H√†ng
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    );
  }

  const subtotal = calculateSubtotal();
  const shipping = subtotal >= 1000000 ? 0 : 30000;

  return (
    <div className="cart-page">
      <div className="container">
        <div className="cart-header">
          <h1>üõí Gi·ªè H√†ng C·ªßa B·∫°n</h1>
          <p>Ki·ªÉm tra v√† ho√†n t·∫•t ƒë∆°n h√†ng</p>
        </div>
        
        {cartItems.length === 0 ? (
          <div className="empty-cart-luxury">
            <div className="empty-cart-icon">üõí</div>
            <h3>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</h3>
            <p>H√£y kh√°m ph√° c√°c s·∫£n ph·∫©m tuy·ªát v·ªùi c·ªßa ch√∫ng t√¥i</p>
            <button 
              className="continue-shopping-btn"
              onClick={goBackToProducts}
            >
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        ) : (
          <div className="cart-content">
            <div className="cart-items-luxury">
              {cartItems.map(item => (
                <div key={item.id} className="cart-item-luxury">
                  <div className="item-image-luxury">
                    <img 
                      src={item.image} 
                      alt={item.name}
                      onError={handleImageError}
                    />
                  </div>
                  <div className="item-details-luxury">
                    <h3>{item.name}</h3>
                    <p className="item-description">{item.description}</p>
                    <p className="item-price-single">{formatPrice(item.price)}</p>
                  </div>
                  <div className="quantity-controls-luxury">
                    <button 
                      onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                      disabled={item.quantity <= 1}
                      className="quantity-btn"
                    >
                      ‚àí
                    </button>
                    <span className="quantity-display">{item.quantity}</span>
                    <button 
                      onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                      disabled={item.quantity >= 100}
                      className="quantity-btn"
                    >
                      +
                    </button>
                  </div>
                  <div className="item-total-luxury">
                    {formatPrice(item.price * item.quantity)}
                  </div>
                  <button 
                    className="remove-btn-luxury"
                    onClick={() => {
                      if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${item.name}" kh·ªèi gi·ªè h√†ng?`)) {
                        removeFromCart(item.id);
                      }
                    }}
                    title="X√≥a s·∫£n ph·∫©m"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              ))}
            </div>
            
            <div className="cart-sidebar">
              <div className="coupon-section">
                <h4>üéÅ M√£ Gi·∫£m Gi√°</h4>
                <div className="coupon-input-group">
                  <input
                    type="text"
                    placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                    value={couponCode}
                    onChange={(e) => setCouponCode(e.target.value)}
                    className="coupon-input"
                  />
                  <button 
                    onClick={applyCoupon} 
                    className="apply-coupon-btn"
                    disabled={!couponCode.trim()}
                  >
                    √Åp d·ª•ng
                  </button>
                </div>
                <div className="coupon-codes">
                  <p>M√£ khuy·∫øn m√£i c√≥ s·∫µn:</p>
                  <div className="available-coupons">
                    <span className="coupon-tag" title="Gi·∫£m 10%">PERFUME10</span>
                    <span className="coupon-tag" title="Gi·∫£m 20%">WELCOME20</span>
                    <span className="coupon-tag" title="Gi·∫£m 15%">LUXURY15</span>
                  </div>
                </div>
              </div>
              
              <div className="cart-summary-luxury">
                <h4>üìã T√≥m T·∫Øt ƒê∆°n H√†ng</h4>
                <div className="summary-details-luxury">
                  <div className="summary-row">
                    <span>S·ªë l∆∞·ª£ng s·∫£n ph·∫©m:</span>
                    <span>{calculateTotalItems()}</span>
                  </div>
                  <div className="summary-row">
                    <span>T·∫°m t√≠nh:</span>
                    <span>{formatPrice(subtotal)}</span>
                  </div>
                  {discount > 0 && (
                    <div className="summary-row discount">
                      <span>Gi·∫£m gi√°:</span>
                      <span>-{formatPrice(discount)}</span>
                    </div>
                  )}
                  <div className="summary-row shipping">
                    <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                    <span>{shipping === 0 ? 'Mi·ªÖn ph√≠' : formatPrice(shipping)}</span>
                  </div>
                  <div className="summary-row total">
                    <span>T·ªïng thanh to√°n:</span>
                    <span>{formatPrice(calculateTotal())}</span>
                  </div>
                </div>
                
                <button 
                  className="checkout-btn-luxury"
                  onClick={() => setShowCheckout(true)}
                >
                  üõçÔ∏è Ti·∫øn H√†nh Thanh To√°n
                </button>
                
                <button 
                  className="continue-shopping-btn"
                  onClick={goBackToProducts}
                >
                  ‚Üê Ti·∫øp t·ª•c mua s·∫Øm
                </button>

                <button 
                  className="clear-cart-btn"
                  onClick={() => {
                    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng?')) {
                      clearCart();
                    }
                  }}
                >
                  üóëÔ∏è X√≥a gi·ªè h√†ng
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Cart;